wordnet_search.py: kullanıcıdan aldığımız kelimenin Türkçe eş anlamlılarını bulmak için WordNet kütüphanesini kullanıyor. 

word2vec_search.py: Word2Vec modelini kullanarak verilen bir kelimenin en benzer 10 kelimesini buluyor ve bunları skoru ile birlikte listeliyor.

word2vec_model.py: MongoDB'den alınan verileri kullanarak bir Word2Vec modelini eğitiyor 

elastic_search.py: senin yaptığının üstüne index kodunda vektör alma ekledim ondan verilen kelimenin vektörünü alıyor ve Elasticsearch kullanarak bu vektöre benzer kelimeleri arıyor

local_search.py: senin bu eş anlamlı bulduğun veri setini localden bakarak eş anlam bulmaya çalışıyor ama en kötü o çalışıyor onu boşver. diğerleri hemen hemen aynı sonuçları veriyor. Mesela beyaz yazıyorsun siyah, mavi kırmızı diye renkleri sıralıyor ama mesela komutan yazıyorsun daha alakalı kelimeler veriyor general, teğmen vs. gibi. 

birde local_search kodunda threshold diye bir şey var. bazı kelimelerin eş anlamlıalrı yok. bu yüzden kelimelere beznerlik skorları veriyoruz benzerlik skorunun belirli bir eşikten büyük olması durumunda, bu kelime eş anlamlı olarak kabul ediyoruz. hocada kullanın demişti bunu.

Ama en mantıklısı her şeyi elastic_search kodunda halledip vektörleri ile birlikte elastic_search'e yükleyip vektör araması yapmak. çünkü bazı kelimeleri yanlış vektörler ile yüklüyor demiştim hata veriyor diye. çünkü mesela komutan yazıyorsun mantıklı şeyler çıkıyor beyaz yazıyorsun mantıksız kelimeler çıkıyor.

farklı modelleride denedim hemen hemen hepsi aynı mantıkta çalışıyor. bi en kötü local_search tü işte. o yüzden vektör olarak düzgün bir şekilde elastice yüklersek gerisi kolay gibi. çünkü vektörü düzgün aldığı kelimelerde modeller mantıklı kelimeler veriyor.
